"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.notificationTrigger = exports.NotificationTriggerService = void 0;
const service_1 = require("../email/service");
const notifications_1 = require("../api/notifications");
// ÏïåÎ¶º Ìä∏Î¶¨Í±∞ ÏÑúÎπÑÏä§
class NotificationTriggerService {
    // ÏÉà Î©îÏãúÏßÄ ÏïåÎ¶º
    async triggerNewMessage(data) {
        // FirestoreÏóê ÏïåÎ¶º ÏÉùÏÑ±
        try {
            await (0, notifications_1.createNewMessageNotification)(data);
            console.log("‚úÖ Firestore ÏÉà Î©îÏãúÏßÄ ÏïåÎ¶º ÏÉùÏÑ± ÏôÑÎ£å:", data.userId);
        }
        catch (error) {
            console.error("‚ùå Firestore ÏÉà Î©îÏãúÏßÄ ÏïåÎ¶º ÏÉùÏÑ± Ïã§Ìå®:", error);
        }
        // Í∏∞Ï°¥ Ïù¥Î©îÏùº ÏïåÎ¶º Ìä∏Î¶¨Í±∞
        await this.triggerNotification({
            type: "new_message",
            userId: data.userId,
            data: {
                senderName: data.senderName,
                productTitle: data.productTitle,
                messagePreview: data.messagePreview,
                chatId: data.chatId,
            },
            priority: "normal",
        });
    }
    // Í±∞Îûò ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ ÏïåÎ¶º
    async triggerTransactionUpdate(data) {
        // FirestoreÏóê ÏïåÎ¶º ÏÉùÏÑ±
        try {
            await (0, notifications_1.createTransactionUpdateNotification)({
                userId: data.userId,
                transactionId: data.transactionId,
                status: data.status,
                productTitle: data.productTitle,
                amount: data.amount,
                counterpartName: data.counterpartName,
                itemId: data.itemId, // ÏÉÅÌíà ID Ï†ÑÎã¨
            });
            console.log("‚úÖ Firestore Í±∞Îûò ÏÉÅÌÉú ÏïåÎ¶º ÏÉùÏÑ± ÏôÑÎ£å:", data.userId);
        }
        catch (error) {
            console.error("‚ùå Firestore Í±∞Îûò ÏÉÅÌÉú ÏïåÎ¶º ÏÉùÏÑ± Ïã§Ìå®:", error);
        }
        // Í∏∞Ï°¥ Ïù¥Î©îÏùº ÏïåÎ¶º Ìä∏Î¶¨Í±∞
        await this.triggerNotification({
            type: "transaction_update",
            userId: data.userId,
            data: {
                transactionId: data.transactionId,
                status: data.status,
                productTitle: data.productTitle,
                productBrand: data.productBrand,
                productModel: data.productModel,
                amount: data.amount,
                counterpartName: data.counterpartName,
                updatedAt: new Date().toLocaleString("ko-KR"),
            },
            priority: "high",
        });
    }
    // Ïö¥ÏÜ° Í≤¨Ï†Å ÏïåÎ¶º
    async triggerLogisticsQuote(data) {
        await this.triggerNotification({
            type: "logistics_quote",
            userId: data.userId,
            data: {
                productId: data.productId,
                productTitle: data.productTitle,
                estimatedPrice: data.estimatedPrice,
                fromAddress: data.fromAddress,
                toAddress: data.toAddress,
                estimatedDays: data.estimatedDays,
                insurance: data.insurance,
                carrierName: data.carrierName,
                serviceType: data.serviceType,
            },
            priority: "normal",
        });
    }
    // ÏßàÎ¨∏ ÎãµÎ≥Ä ÏïåÎ¶º
    async triggerQuestionAnswer(data) {
        await this.triggerNotification({
            type: "question_answer",
            userId: data.userId,
            data: {
                productId: data.productId,
                productTitle: data.productTitle,
                questionId: data.questionId,
                answer: data.answer,
                sellerName: data.sellerName,
            },
            priority: "normal",
        });
    }
    // Í≤∞Ï†ú ÏÉÅÌÉú ÏïåÎ¶º
    async triggerPaymentStatus(data) {
        await this.triggerNotification({
            type: "payment_status",
            userId: data.userId,
            data: {
                transactionId: data.transactionId,
                status: data.status,
                amount: data.amount,
                productTitle: data.productTitle,
            },
            priority: "high",
        });
    }
    // ÏÉÅÌíà Í¥ÄÏã¨ ÏïåÎ¶º
    async triggerProductInterest(data) {
        await this.triggerNotification({
            type: "product_interest",
            userId: data.userId,
            data: {
                productId: data.productId,
                productTitle: data.productTitle,
                interestType: data.interestType,
                price: data.price,
                previousPrice: data.previousPrice,
            },
            priority: "low",
        });
    }
    // ÏãúÏä§ÌÖú Í≥µÏßÄ ÏïåÎ¶º
    async triggerSystemAnnouncement(data) {
        await this.triggerNotification({
            type: "system_announcement",
            userId: data.userId,
            data: {
                title: data.title,
                content: data.content,
                announcementType: data.announcementType,
            },
            priority: "urgent",
        });
    }
    // Íµ¨Îß§ÌôïÏù∏ ÏôÑÎ£å ÏïåÎ¶º (ÌåêÎß§ÏûêÏóêÍ≤å)
    async triggerPurchaseConfirmation(data) {
        // FirestoreÏóê ÏïåÎ¶º ÏÉùÏÑ±
        try {
            const { createNotification } = await Promise.resolve().then(() => __importStar(require("../api/notifications")));
            await createNotification({
                userId: data.userId,
                type: "transaction_update",
                title: "Íµ¨Îß§ÌôïÏù∏ ÏôÑÎ£å",
                message: `${data.buyerNickname}ÎãòÏù¥ "${data.productTitle}" ÏÉÅÌíàÏùò Íµ¨Îß§Î•º ÌôïÏù∏ÌñàÏäµÎãàÎã§. Í±∞ÎûòÍ∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§! üéâ`,
                link: "/profile/transactions",
                isRead: false,
            });
            console.log("‚úÖ Firestore Íµ¨Îß§ÌôïÏù∏ ÏïåÎ¶º ÏÉùÏÑ± ÏôÑÎ£å:", data.userId);
        }
        catch (error) {
            console.error("‚ùå Firestore Íµ¨Îß§ÌôïÏù∏ ÏïåÎ¶º ÏÉùÏÑ± Ïã§Ìå®:", error);
        }
    }
    // Í≥µÌÜµ ÏïåÎ¶º Ìä∏Î¶¨Í±∞
    async triggerNotification(data) {
        try {
            // ÏïåÎ¶º ÏÑ§Ï†ï ÌôïÏù∏
            const shouldSend = await service_1.emailService.shouldSendNotification(data.userId, data.type);
            if (!shouldSend) {
                console.log(`ÏïåÎ¶º Î∞úÏÜ° Í±¥ÎÑàÎõ∞Í∏∞: ${data.type} (ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ï)`);
                return;
            }
            // Ïù¥Î©îÏùº ÏÉùÏÑ±
            const emailNotification = await service_1.emailService.createEmailFromTemplate(data.userId, data.type, data.data);
            // Ïù¥Î©îÏùº Î∞úÏÜ°
            const success = await service_1.emailService.sendEmail(emailNotification);
            if (success) {
                console.log(`‚úÖ ÏïåÎ¶º Î∞úÏÜ° ÏÑ±Í≥µ: ${data.type} -> ${data.userId}`);
            }
            else {
                console.log(`‚ùå ÏïåÎ¶º Î∞úÏÜ° Ïã§Ìå®: ${data.type} -> ${data.userId}`);
            }
            // ÏïåÎ¶º Ìä∏Î¶¨Í±∞ Í∏∞Î°ù (Ïã§Ï†úÎ°úÎäî Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Ï†ÄÏû•)
            const trigger = {
                id: `trigger_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
                type: data.type,
                userId: data.userId,
                data: data.data,
                priority: data.priority,
                status: success ? "completed" : "failed",
                createdAt: new Date(),
                processedAt: new Date(),
            };
            console.log("üìù ÏïåÎ¶º Ìä∏Î¶¨Í±∞ Í∏∞Î°ù:", trigger);
        }
        catch (error) {
            console.error("ÏïåÎ¶º Ìä∏Î¶¨Í±∞ Ïò§Î•ò:", error);
        }
    }
    // Î∞∞Ïπò ÏïåÎ¶º Ï≤òÎ¶¨
    async processBatchNotifications(triggers) {
        const results = await Promise.allSettled(triggers.map(async (trigger) => {
            await this.triggerNotification({
                type: trigger.type,
                userId: trigger.userId,
                data: trigger.data,
                priority: trigger.priority,
            });
        }));
        const success = results.filter(r => r.status === "fulfilled").length;
        const failed = results.length - success;
        return { success, failed };
    }
}
exports.NotificationTriggerService = NotificationTriggerService;
// Ïã±Í∏ÄÌÜ§ Ïù∏Ïä§ÌÑ¥Ïä§
exports.notificationTrigger = new NotificationTriggerService();
//# sourceMappingURL=trigger.js.map