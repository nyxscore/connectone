rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ==================== MVP 임시 Rules ====================
    // TODO: 베타 테스트 후 강화 필요
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(uid) {
      return isAuthenticated() && request.auth.uid == uid;
    }
    
    // ==================== 전체 임시 허용 (MVP 긴급) ====================
    match /{document=**} {
      // 읽기는 모두 허용 (비회원 포함), 쓰기는 인증된 사용자만
      allow read: if true;
      allow write: if isAuthenticated();
    }
    
    // ==================== USERS ====================
    
    match /users/{userId} {
      // 사용자 프로필은 비회원도 조회 가능 (판매자 정보 확인용)
      allow read: if true;
      // MVP용: NextAuth 사용자를 위해 더 관대한 규칙
      allow create: if true; // 임시로 모든 사용자 생성 허용
      allow update: if true; // 임시로 모든 사용자 업데이트 허용
      allow delete: if false;
    }
    
    // ==================== ITEMS ====================
    
    match /items/{itemId} {
      // 상품 목록 및 상세 정보는 비회원도 조회 가능
      allow read: if true;
      
      allow create: if isAuthenticated() && 
        request.resource.data.sellerUid == request.auth.uid;
      
      // 상품 업데이트: 본인만 가능, 상태 변경은 Cloud Functions만
      allow update: if isAuthenticated() && (
        // 판매자: 일반 필드만 업데이트 가능 (status, soldAt, autoConfirmScheduled, buyerUid 제외)
        (resource.data.sellerUid == request.auth.uid &&
         request.resource.data.status == resource.data.status &&
         request.resource.data.soldAt == resource.data.soldAt &&
         (!request.resource.data.keys().hasAny(['autoConfirmScheduled']) || 
          request.resource.data.autoConfirmScheduled == resource.data.autoConfirmScheduled) &&
         (!request.resource.data.keys().hasAny(['buyerUid']) || 
          request.resource.data.buyerUid == resource.data.buyerUid)) ||
        
        // 구매자: 배송지 정보만 업데이트 가능
        (resource.data.buyerUid == request.auth.uid &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['shippingAddress', 'updatedAt']) &&
         request.resource.data.status == resource.data.status)
      );
      
      allow delete: if resource.data.sellerUid == request.auth.uid;
    }
    
    // ==================== CHATS ====================
    
    match /chats/{chatId} {
      // 채팅 읽기: 로그인한 사람만 (MVP용 - 나중에 강화 가능)
      allow read: if isAuthenticated();
      
      // 채팅 생성: 로그인한 사람만 (MVP용)
      allow create: if isAuthenticated();
      
      // 채팅 업데이트: 로그인한 사람만 (MVP용)
      allow update: if isAuthenticated();
      
      // 채팅 삭제: 로그인한 사람만 (MVP용)
      allow delete: if isAuthenticated();
      
      // ==================== MESSAGES (서브컬렉션) ====================
      
      match /messages/{messageId} {
        allow read: if isAuthenticated();
        
        allow create: if isAuthenticated();
        
        allow update: if isAuthenticated();
        
        allow delete: if false;
      }
    }
    
    // ==================== NOTIFICATIONS ====================
    
    match /notifications/{notificationId} {
      // MVP용: 더 관대한 규칙으로 임시 변경
      allow read: if true; // 임시로 모든 사용자 읽기 허용
      allow create: if true; // 임시로 모든 사용자 생성 허용
      allow update: if true; // 임시로 모든 사용자 업데이트 허용
      allow delete: if true; // 임시로 모든 사용자 삭제 허용
    }
    
    // ==================== EVENT LOGS ====================
    
    match /event_logs/{logId} {
      // 읽기: 관련된 item의 소유자만
      allow read: if isAuthenticated();
      
      // 생성/수정/삭제: Cloud Functions만
      allow create, update, delete: if false;
    }
    
    // ==================== REVIEWS ====================
    
    match /reviews/{reviewId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
        request.resource.data.reviewerId == request.auth.uid;
      
      allow update: if isAuthenticated() && 
        resource.data.reviewerId == request.auth.uid;
      
      allow delete: if isAuthenticated() && 
        resource.data.reviewerId == request.auth.uid;
    }
    
    // ==================== REPORTS ====================
    
    match /reports/{reportId} {
      allow read: if false; // 관리자만 (Admin SDK)
      
      allow create: if isAuthenticated() && 
        request.resource.data.reporterId == request.auth.uid;
      
      allow update, delete: if false; // 관리자만
    }
    
    // ==================== TRANSACTIONS ====================
    
    match /transactions/{transactionId} {
      // MVP용: 로그인한 사람만 생성 가능
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if false;
    }
  }
}






