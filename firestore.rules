rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ==================== 헬퍼 함수 ====================
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(uid) {
      return isAuthenticated() && request.auth.uid == uid;
    }
    
    // ==================== USERS ====================
    
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false;
    }
    
    // ==================== ITEMS ====================
    
    match /items/{itemId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
        request.resource.data.sellerUid == request.auth.uid;
      
      // 상품 업데이트: 본인만 가능, 단 상태 변경은 제한적
      allow update: if isAuthenticated() && (
        // 일반 필드 업데이트 (판매자)
        (resource.data.sellerUid == request.auth.uid &&
         !request.resource.data.diff(resource.data).affectedKeys().hasAny(['status', 'soldAt', 'autoConfirmScheduled'])) ||
        
        // 배송지 정보 업데이트 (구매자)
        (resource.data.buyerUid == request.auth.uid &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['shippingAddress', 'updatedAt'])) ||
        
        // 상태 변경은 Cloud Functions만 (status 필드는 변경 불가)
        (request.resource.data.status == resource.data.status)
      );
      
      allow delete: if resource.data.sellerUid == request.auth.uid;
    }
    
    // ==================== CHATS ====================
    
    match /chats/{chatId} {
      allow read: if isAuthenticated() && (
        request.auth.uid in resource.data.participants
      );
      
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.participants;
      
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      
      allow delete: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      
      // ==================== MESSAGES (서브컬렉션) ====================
      
      match /messages/{messageId} {
        allow read: if isAuthenticated() && (
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants
        );
        
        allow create: if isAuthenticated() && (
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants ||
          request.resource.data.senderUid == 'system'
        );
        
        allow update: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        
        allow delete: if false;
      }
    }
    
    // ==================== NOTIFICATIONS ====================
    
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      
      allow create: if false; // Cloud Functions만
      
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
    
    // ==================== EVENT LOGS ====================
    
    match /event_logs/{logId} {
      // 읽기: 관련된 item의 소유자만
      allow read: if isAuthenticated();
      
      // 생성/수정/삭제: Cloud Functions만
      allow create, update, delete: if false;
    }
    
    // ==================== REVIEWS ====================
    
    match /reviews/{reviewId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
        request.resource.data.reviewerId == request.auth.uid;
      
      allow update: if isAuthenticated() && 
        resource.data.reviewerId == request.auth.uid;
      
      allow delete: if isAuthenticated() && 
        resource.data.reviewerId == request.auth.uid;
    }
    
    // ==================== REPORTS ====================
    
    match /reports/{reportId} {
      allow read: if false; // 관리자만 (Admin SDK)
      
      allow create: if isAuthenticated() && 
        request.resource.data.reporterId == request.auth.uid;
      
      allow update, delete: if false; // 관리자만
    }
  }
}




